/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.ListConditions200ResponseResultsInnerSipMapping
import org.openapitools.client.models.ListConditions200ResponseResultsInnerUpdateRules

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * A condition generally refers to any extra information passed in a trade or a quote. These conditions may or may not affect the behavior of aggregates.
 *
 * @param assetClass An identifier for a group of similar financial instruments.
 * @param dataTypes Data types that this condition applies to.
 * @param id An identifier used by Polygon.io for this condition. Unique per data type.
 * @param name The name of this condition.
 * @param sipMapping 
 * @param type An identifier for a collection of related conditions.
 * @param abbreviation A commonly-used abbreviation for this condition.
 * @param description A short description of the semantics of this condition.
 * @param exchange If present, mapping this condition from a Polygon.io code to a SIP symbol depends on this attribute. In other words, data with this condition attached comes exclusively from the given exchange.
 * @param legacy If true, this condition is from an old version of the SIPs' specs and no longer is used. Other conditions may or may not reuse the same symbol as this one.
 * @param updateRules 
 */


data class ListConditions200ResponseResultsInner (

    /* An identifier for a group of similar financial instruments. */
    @Json(name = "asset_class")
    val assetClass: ListConditions200ResponseResultsInner.AssetClass,

    /* Data types that this condition applies to. */
    @Json(name = "data_types")
    val dataTypes: kotlin.collections.List<ListConditions200ResponseResultsInner.DataTypes>,

    /* An identifier used by Polygon.io for this condition. Unique per data type. */
    @Json(name = "id")
    val id: kotlin.Int,

    /* The name of this condition. */
    @Json(name = "name")
    val name: kotlin.String,

    @Json(name = "sip_mapping")
    val sipMapping: ListConditions200ResponseResultsInnerSipMapping,

    /* An identifier for a collection of related conditions. */
    @Json(name = "type")
    val type: ListConditions200ResponseResultsInner.Type,

    /* A commonly-used abbreviation for this condition. */
    @Json(name = "abbreviation")
    val abbreviation: kotlin.String? = null,

    /* A short description of the semantics of this condition. */
    @Json(name = "description")
    val description: kotlin.String? = null,

    /* If present, mapping this condition from a Polygon.io code to a SIP symbol depends on this attribute. In other words, data with this condition attached comes exclusively from the given exchange. */
    @Json(name = "exchange")
    val exchange: kotlin.Int? = null,

    /* If true, this condition is from an old version of the SIPs' specs and no longer is used. Other conditions may or may not reuse the same symbol as this one. */
    @Json(name = "legacy")
    val legacy: kotlin.Boolean? = null,

    @Json(name = "update_rules")
    val updateRules: ListConditions200ResponseResultsInnerUpdateRules? = null

) {

    /**
     * An identifier for a group of similar financial instruments.
     *
     * Values: stocks,options,crypto,fx
     */
    @JsonClass(generateAdapter = false)
    enum class AssetClass(val value: kotlin.String) {
        @Json(name = "stocks") stocks("stocks"),
        @Json(name = "options") options("options"),
        @Json(name = "crypto") crypto("crypto"),
        @Json(name = "fx") fx("fx");
    }
    /**
     * Data types that this condition applies to.
     *
     * Values: trade,bbo,nbbo
     */
    @JsonClass(generateAdapter = false)
    enum class DataTypes(val value: kotlin.String) {
        @Json(name = "trade") trade("trade"),
        @Json(name = "bbo") bbo("bbo"),
        @Json(name = "nbbo") nbbo("nbbo");
    }
    /**
     * An identifier for a collection of related conditions.
     *
     * Values: saleCondition,quoteCondition,sipGeneratedFlag,financialStatusIndicator,shortSaleRestrictionIndicator,settlementCondition,marketCondition,tradeThruExempt
     */
    @JsonClass(generateAdapter = false)
    enum class Type(val value: kotlin.String) {
        @Json(name = "sale_condition") saleCondition("sale_condition"),
        @Json(name = "quote_condition") quoteCondition("quote_condition"),
        @Json(name = "sip_generated_flag") sipGeneratedFlag("sip_generated_flag"),
        @Json(name = "financial_status_indicator") financialStatusIndicator("financial_status_indicator"),
        @Json(name = "short_sale_restriction_indicator") shortSaleRestrictionIndicator("short_sale_restriction_indicator"),
        @Json(name = "settlement_condition") settlementCondition("settlement_condition"),
        @Json(name = "market_condition") marketCondition("market_condition"),
        @Json(name = "trade_thru_exempt") tradeThruExempt("trade_thru_exempt");
    }

}

