/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Financials
 *
 * @param ticker The exchange symbol that this item is traded under.
 * @param ebITDAMargin 
 * @param accumulatedOtherComprehensiveIncome 
 * @param accumulatedRetainedEarningsDeficit 
 * @param assetTurnover 
 * @param assets 
 * @param assetsAverage 
 * @param assetsCurrent 
 * @param assetsNonCurrent 
 * @param averageEquity 
 * @param bookValuePerShare 
 * @param calendarDate 
 * @param capitalExpenditure 
 * @param cashAndEquivalents 
 * @param cashAndEquivalentsUSD 
 * @param consolidatedIncome 
 * @param costOfRevenue 
 * @param currentLiabilities 
 * @param currentRatio 
 * @param debt 
 * @param debtCurrent 
 * @param debtNonCurrent 
 * @param debtToEquityRatio 
 * @param debtUSD 
 * @param deferredRevenue 
 * @param deposits 
 * @param depreciationAmortizationAndAccretion 
 * @param dividendYield 
 * @param dividendsPerBasicCommonShare 
 * @param earningBeforeInterestTaxes 
 * @param earningBeforeInterestTaxesUSD 
 * @param earningsBeforeInterestTaxesDepreciationAmortization 
 * @param earningsBeforeInterestTaxesDepreciationAmortizationUSD 
 * @param earningsBeforeTax 
 * @param earningsPerBasicShare 
 * @param earningsPerBasicShareUSD 
 * @param earningsPerDilutedShare 
 * @param effectOfExchangeRateChangesOnCash 
 * @param enterpriseValue 
 * @param enterpriseValueOverEBIT 
 * @param enterpriseValueOverEBITDA 
 * @param foreignCurrencyUSDExchangeRate 
 * @param freeCashFlow 
 * @param freeCashFlowPerShare 
 * @param goodwillAndIntangibleAssets 
 * @param grossMargin 
 * @param grossProfit 
 * @param incomeTaxExpense 
 * @param interestExpense 
 * @param inventory 
 * @param investedCapital 
 * @param investedCapitalAverage 
 * @param investments 
 * @param investmentsCurrent 
 * @param investmentsNonCurrent 
 * @param issuanceDebtSecurities 
 * @param issuanceEquityShares 
 * @param liabilitiesNonCurrent 
 * @param marketCapitalization 
 * @param netCashFlow 
 * @param netCashFlowBusinessAcquisitionsDisposals 
 * @param netCashFlowFromFinancing 
 * @param netCashFlowFromInvesting 
 * @param netCashFlowFromOperations 
 * @param netCashFlowInvestmentAcquisitionsDisposals 
 * @param netIncome 
 * @param netIncomeCommonStock 
 * @param netIncomeCommonStockUSD 
 * @param netIncomeToNonControllingInterests 
 * @param netLossIncomeFromDiscontinuedOperations 
 * @param operatingExpenses 
 * @param operatingIncome 
 * @param paymentDividendsOtherCashDistributions 
 * @param payoutRatio 
 * @param period Reporting period.
 * @param preferredDividendsIncomeStatementImpact 
 * @param priceEarnings 
 * @param priceSales 
 * @param priceToBookValue 
 * @param priceToEarningsRatio 
 * @param priceToSalesRatio 
 * @param profitMargin 
 * @param propertyPlantEquipmentNet 
 * @param reportPeriod 
 * @param researchAndDevelopmentExpense 
 * @param returnOnAverageAssets 
 * @param returnOnAverageEquity 
 * @param returnOnInvestedCapital 
 * @param returnOnSales 
 * @param revenues 
 * @param revenuesUSD 
 * @param salesPerShare 
 * @param sellingGeneralAndAdministrativeExpense 
 * @param shareBasedCompensation 
 * @param shareFactor 
 * @param sharePriceAdjustedClose 
 * @param shareholdersEquity 
 * @param shareholdersEquityUSD 
 * @param shares 
 * @param tangibleAssetValue 
 * @param tangibleAssetsBookValuePerShare 
 * @param taxAssets 
 * @param taxLiabilities 
 * @param totalLiabilities 
 * @param tradeAndNonTradePayables 
 * @param tradeAndNonTradeReceivables 
 * @param updated 
 * @param weightedAverageShares 
 * @param weightedAverageSharesDiluted 
 * @param workingCapital 
 */


data class Financials (

    /* The exchange symbol that this item is traded under. */
    @Json(name = "ticker")
    val ticker: kotlin.String,

    @Json(name = "EBITDAMargin")
    val ebITDAMargin: kotlin.Double? = null,

    @Json(name = "accumulatedOtherComprehensiveIncome")
    val accumulatedOtherComprehensiveIncome: kotlin.Int? = null,

    @Json(name = "accumulatedRetainedEarningsDeficit")
    val accumulatedRetainedEarningsDeficit: kotlin.Int? = null,

    @Json(name = "assetTurnover")
    val assetTurnover: kotlin.Int? = null,

    @Json(name = "assets")
    val assets: kotlin.Int? = null,

    @Json(name = "assetsAverage")
    val assetsAverage: kotlin.Int? = null,

    @Json(name = "assetsCurrent")
    val assetsCurrent: kotlin.Int? = null,

    @Json(name = "assetsNonCurrent")
    val assetsNonCurrent: kotlin.Int? = null,

    @Json(name = "averageEquity")
    val averageEquity: kotlin.Int? = null,

    @Json(name = "bookValuePerShare")
    val bookValuePerShare: kotlin.Double? = null,

    @Json(name = "calendarDate")
    val calendarDate: java.time.OffsetDateTime? = null,

    @Json(name = "capitalExpenditure")
    val capitalExpenditure: kotlin.Int? = null,

    @Json(name = "cashAndEquivalents")
    val cashAndEquivalents: kotlin.Int? = null,

    @Json(name = "cashAndEquivalentsUSD")
    val cashAndEquivalentsUSD: kotlin.Int? = null,

    @Json(name = "consolidatedIncome")
    val consolidatedIncome: kotlin.Int? = null,

    @Json(name = "costOfRevenue")
    val costOfRevenue: kotlin.Int? = null,

    @Json(name = "currentLiabilities")
    val currentLiabilities: kotlin.Int? = null,

    @Json(name = "currentRatio")
    val currentRatio: kotlin.Double? = null,

    @Json(name = "debt")
    val debt: kotlin.Int? = null,

    @Json(name = "debtCurrent")
    val debtCurrent: kotlin.Int? = null,

    @Json(name = "debtNonCurrent")
    val debtNonCurrent: kotlin.Int? = null,

    @Json(name = "debtToEquityRatio")
    val debtToEquityRatio: kotlin.Double? = null,

    @Json(name = "debtUSD")
    val debtUSD: kotlin.Int? = null,

    @Json(name = "deferredRevenue")
    val deferredRevenue: kotlin.Int? = null,

    @Json(name = "deposits")
    val deposits: kotlin.Int? = null,

    @Json(name = "depreciationAmortizationAndAccretion")
    val depreciationAmortizationAndAccretion: kotlin.Int? = null,

    @Json(name = "dividendYield")
    val dividendYield: kotlin.Int? = null,

    @Json(name = "dividendsPerBasicCommonShare")
    val dividendsPerBasicCommonShare: kotlin.Int? = null,

    @Json(name = "earningBeforeInterestTaxes")
    val earningBeforeInterestTaxes: kotlin.Int? = null,

    @Json(name = "earningBeforeInterestTaxesUSD")
    val earningBeforeInterestTaxesUSD: kotlin.Int? = null,

    @Json(name = "earningsBeforeInterestTaxesDepreciationAmortization")
    val earningsBeforeInterestTaxesDepreciationAmortization: kotlin.Int? = null,

    @Json(name = "earningsBeforeInterestTaxesDepreciationAmortizationUSD")
    val earningsBeforeInterestTaxesDepreciationAmortizationUSD: kotlin.Int? = null,

    @Json(name = "earningsBeforeTax")
    val earningsBeforeTax: kotlin.Int? = null,

    @Json(name = "earningsPerBasicShare")
    val earningsPerBasicShare: kotlin.Double? = null,

    @Json(name = "earningsPerBasicShareUSD")
    val earningsPerBasicShareUSD: kotlin.Double? = null,

    @Json(name = "earningsPerDilutedShare")
    val earningsPerDilutedShare: kotlin.Double? = null,

    @Json(name = "effectOfExchangeRateChangesOnCash")
    val effectOfExchangeRateChangesOnCash: kotlin.Int? = null,

    @Json(name = "enterpriseValue")
    val enterpriseValue: kotlin.Int? = null,

    @Json(name = "enterpriseValueOverEBIT")
    val enterpriseValueOverEBIT: kotlin.Int? = null,

    @Json(name = "enterpriseValueOverEBITDA")
    val enterpriseValueOverEBITDA: kotlin.Double? = null,

    @Json(name = "foreignCurrencyUSDExchangeRate")
    val foreignCurrencyUSDExchangeRate: kotlin.Int? = null,

    @Json(name = "freeCashFlow")
    val freeCashFlow: kotlin.Int? = null,

    @Json(name = "freeCashFlowPerShare")
    val freeCashFlowPerShare: kotlin.Double? = null,

    @Json(name = "goodwillAndIntangibleAssets")
    val goodwillAndIntangibleAssets: kotlin.Int? = null,

    @Json(name = "grossMargin")
    val grossMargin: kotlin.Double? = null,

    @Json(name = "grossProfit")
    val grossProfit: kotlin.Int? = null,

    @Json(name = "incomeTaxExpense")
    val incomeTaxExpense: kotlin.Int? = null,

    @Json(name = "interestExpense")
    val interestExpense: kotlin.Int? = null,

    @Json(name = "inventory")
    val inventory: kotlin.Int? = null,

    @Json(name = "investedCapital")
    val investedCapital: kotlin.Int? = null,

    @Json(name = "investedCapitalAverage")
    val investedCapitalAverage: kotlin.Int? = null,

    @Json(name = "investments")
    val investments: kotlin.Int? = null,

    @Json(name = "investmentsCurrent")
    val investmentsCurrent: kotlin.Int? = null,

    @Json(name = "investmentsNonCurrent")
    val investmentsNonCurrent: kotlin.Int? = null,

    @Json(name = "issuanceDebtSecurities")
    val issuanceDebtSecurities: kotlin.Int? = null,

    @Json(name = "issuanceEquityShares")
    val issuanceEquityShares: kotlin.Int? = null,

    @Json(name = "liabilitiesNonCurrent")
    val liabilitiesNonCurrent: kotlin.Int? = null,

    @Json(name = "marketCapitalization")
    val marketCapitalization: kotlin.Int? = null,

    @Json(name = "netCashFlow")
    val netCashFlow: kotlin.Int? = null,

    @Json(name = "netCashFlowBusinessAcquisitionsDisposals")
    val netCashFlowBusinessAcquisitionsDisposals: kotlin.Int? = null,

    @Json(name = "netCashFlowFromFinancing")
    val netCashFlowFromFinancing: kotlin.Int? = null,

    @Json(name = "netCashFlowFromInvesting")
    val netCashFlowFromInvesting: kotlin.Int? = null,

    @Json(name = "netCashFlowFromOperations")
    val netCashFlowFromOperations: kotlin.Int? = null,

    @Json(name = "netCashFlowInvestmentAcquisitionsDisposals")
    val netCashFlowInvestmentAcquisitionsDisposals: kotlin.Int? = null,

    @Json(name = "netIncome")
    val netIncome: kotlin.Int? = null,

    @Json(name = "netIncomeCommonStock")
    val netIncomeCommonStock: kotlin.Int? = null,

    @Json(name = "netIncomeCommonStockUSD")
    val netIncomeCommonStockUSD: kotlin.Int? = null,

    @Json(name = "netIncomeToNonControllingInterests")
    val netIncomeToNonControllingInterests: kotlin.Int? = null,

    @Json(name = "netLossIncomeFromDiscontinuedOperations")
    val netLossIncomeFromDiscontinuedOperations: kotlin.Int? = null,

    @Json(name = "operatingExpenses")
    val operatingExpenses: kotlin.Int? = null,

    @Json(name = "operatingIncome")
    val operatingIncome: kotlin.Int? = null,

    @Json(name = "paymentDividendsOtherCashDistributions")
    val paymentDividendsOtherCashDistributions: kotlin.Int? = null,

    @Json(name = "payoutRatio")
    val payoutRatio: kotlin.Int? = null,

    /* Reporting period. */
    @Json(name = "period")
    val period: Financials.Period? = null,

    @Json(name = "preferredDividendsIncomeStatementImpact")
    val preferredDividendsIncomeStatementImpact: kotlin.Int? = null,

    @Json(name = "priceEarnings")
    val priceEarnings: kotlin.Double? = null,

    @Json(name = "priceSales")
    val priceSales: kotlin.Double? = null,

    @Json(name = "priceToBookValue")
    val priceToBookValue: kotlin.Double? = null,

    @Json(name = "priceToEarningsRatio")
    val priceToEarningsRatio: kotlin.Double? = null,

    @Json(name = "priceToSalesRatio")
    val priceToSalesRatio: kotlin.Double? = null,

    @Json(name = "profitMargin")
    val profitMargin: kotlin.Double? = null,

    @Json(name = "propertyPlantEquipmentNet")
    val propertyPlantEquipmentNet: kotlin.Int? = null,

    @Json(name = "reportPeriod")
    val reportPeriod: java.time.OffsetDateTime? = null,

    @Json(name = "researchAndDevelopmentExpense")
    val researchAndDevelopmentExpense: kotlin.Int? = null,

    @Json(name = "returnOnAverageAssets")
    val returnOnAverageAssets: kotlin.Int? = null,

    @Json(name = "returnOnAverageEquity")
    val returnOnAverageEquity: kotlin.Int? = null,

    @Json(name = "returnOnInvestedCapital")
    val returnOnInvestedCapital: kotlin.Int? = null,

    @Json(name = "returnOnSales")
    val returnOnSales: kotlin.Double? = null,

    @Json(name = "revenues")
    val revenues: kotlin.Int? = null,

    @Json(name = "revenuesUSD")
    val revenuesUSD: kotlin.Int? = null,

    @Json(name = "salesPerShare")
    val salesPerShare: kotlin.Double? = null,

    @Json(name = "sellingGeneralAndAdministrativeExpense")
    val sellingGeneralAndAdministrativeExpense: kotlin.Int? = null,

    @Json(name = "shareBasedCompensation")
    val shareBasedCompensation: kotlin.Int? = null,

    @Json(name = "shareFactor")
    val shareFactor: kotlin.Int? = null,

    @Json(name = "sharePriceAdjustedClose")
    val sharePriceAdjustedClose: kotlin.Double? = null,

    @Json(name = "shareholdersEquity")
    val shareholdersEquity: kotlin.Int? = null,

    @Json(name = "shareholdersEquityUSD")
    val shareholdersEquityUSD: kotlin.Int? = null,

    @Json(name = "shares")
    val shares: kotlin.Int? = null,

    @Json(name = "tangibleAssetValue")
    val tangibleAssetValue: kotlin.Int? = null,

    @Json(name = "tangibleAssetsBookValuePerShare")
    val tangibleAssetsBookValuePerShare: kotlin.Double? = null,

    @Json(name = "taxAssets")
    val taxAssets: kotlin.Int? = null,

    @Json(name = "taxLiabilities")
    val taxLiabilities: kotlin.Int? = null,

    @Json(name = "totalLiabilities")
    val totalLiabilities: kotlin.Int? = null,

    @Json(name = "tradeAndNonTradePayables")
    val tradeAndNonTradePayables: kotlin.Int? = null,

    @Json(name = "tradeAndNonTradeReceivables")
    val tradeAndNonTradeReceivables: kotlin.Int? = null,

    @Json(name = "updated")
    val updated: java.time.OffsetDateTime? = null,

    @Json(name = "weightedAverageShares")
    val weightedAverageShares: kotlin.Int? = null,

    @Json(name = "weightedAverageSharesDiluted")
    val weightedAverageSharesDiluted: kotlin.Int? = null,

    @Json(name = "workingCapital")
    val workingCapital: kotlin.Int? = null

) {

    /**
     * Reporting period.
     *
     * Values: q,t,qA,tA,y,yA
     */
    @JsonClass(generateAdapter = false)
    enum class Period(val value: kotlin.String) {
        @Json(name = "Q") q("Q"),
        @Json(name = "T") t("T"),
        @Json(name = "QA") qA("QA"),
        @Json(name = "TA") tA("TA"),
        @Json(name = "Y") y("Y"),
        @Json(name = "YA") yA("YA");
    }

}

