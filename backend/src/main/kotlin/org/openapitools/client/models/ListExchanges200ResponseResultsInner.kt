/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * An entity that reports trades.
 *
 * @param assetClass An identifier for a group of similar financial instruments.
 * @param id A unique identifier used by Polygon.io for this exchange.
 * @param locale An identifier for a geographical location.
 * @param name Name of this exchange.
 * @param type Represents the type of exchange.
 * @param acronym A commonly used abbreviation for this exchange.
 * @param mic The Market Identifier Code of this exchange (see ISO 10383).
 * @param operatingMic The MIC of the entity that operates this exchange.
 * @param participantId The ID used by SIP's to represent this exchange.
 * @param url A link to this exchange's website, if one exists.
 */


data class ListExchanges200ResponseResultsInner (

    /* An identifier for a group of similar financial instruments. */
    @Json(name = "asset_class")
    val assetClass: ListExchanges200ResponseResultsInner.AssetClass,

    /* A unique identifier used by Polygon.io for this exchange. */
    @Json(name = "id")
    val id: kotlin.Int,

    /* An identifier for a geographical location. */
    @Json(name = "locale")
    val locale: ListExchanges200ResponseResultsInner.Locale,

    /* Name of this exchange. */
    @Json(name = "name")
    val name: kotlin.String,

    /* Represents the type of exchange. */
    @Json(name = "type")
    val type: ListExchanges200ResponseResultsInner.Type,

    /* A commonly used abbreviation for this exchange. */
    @Json(name = "acronym")
    val acronym: kotlin.String? = null,

    /* The Market Identifier Code of this exchange (see ISO 10383). */
    @Json(name = "mic")
    val mic: kotlin.String? = null,

    /* The MIC of the entity that operates this exchange. */
    @Json(name = "operating_mic")
    val operatingMic: kotlin.String? = null,

    /* The ID used by SIP's to represent this exchange. */
    @Json(name = "participant_id")
    val participantId: kotlin.String? = null,

    /* A link to this exchange's website, if one exists. */
    @Json(name = "url")
    val url: kotlin.String? = null

) {

    /**
     * An identifier for a group of similar financial instruments.
     *
     * Values: stocks,options,crypto,fx
     */
    @JsonClass(generateAdapter = false)
    enum class AssetClass(val value: kotlin.String) {
        @Json(name = "stocks") stocks("stocks"),
        @Json(name = "options") options("options"),
        @Json(name = "crypto") crypto("crypto"),
        @Json(name = "fx") fx("fx");
    }
    /**
     * An identifier for a geographical location.
     *
     * Values: us,global
     */
    @JsonClass(generateAdapter = false)
    enum class Locale(val value: kotlin.String) {
        @Json(name = "us") us("us"),
        @Json(name = "global") global("global");
    }
    /**
     * Represents the type of exchange.
     *
     * Values: exchange,tRF,sIP
     */
    @JsonClass(generateAdapter = false)
    enum class Type(val value: kotlin.String) {
        @Json(name = "exchange") exchange("exchange"),
        @Json(name = "TRF") tRF("TRF"),
        @Json(name = "SIP") sIP("SIP");
    }

}

