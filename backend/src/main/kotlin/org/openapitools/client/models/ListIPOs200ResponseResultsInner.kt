/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param ipoStatus The status of the IPO event. IPO events start out as status \"rumor\" or \"pending\". On listing day, the status changes to \"new\". After the listing day, the status changes to \"history\".  The status \"direct_listing_process\" corresponds to a type of offering where, instead of going through all the IPO processes, the company decides to list its shares directly on an exchange, without using an investment bank or other intermediaries. This is called a direct listing, direct placement, or direct public offering (DPO).
 * @param issuerName Name of issuer.
 * @param lastUpdated The date when the IPO event was last modified.
 * @param securityType The classification of the stock. For example, \"CS\" stands for Common Stock.
 * @param ticker The ticker symbol of the IPO event.
 * @param announcedDate The date when the IPO event was announced.
 * @param currencyCode Underlying currency of the security.
 * @param finalIssuePrice The price set by the company and its underwriters before the IPO goes live.
 * @param highestOfferPrice The highest price within the IPO price range that the company might use to price the shares.
 * @param isin International Securities Identification Number. This is a unique twelve-digit code that is assigned to every security issuance in the world.
 * @param listingDate First trading date for the newly listed entity.
 * @param lotSize The minimum number of shares that can be bought or sold in a single transaction.
 * @param lowestOfferPrice The lowest price within the IPO price range that the company is willing to offer its shares to investors.
 * @param maxSharesOffered The upper limit of the shares that the company is offering to investors.
 * @param minSharesOffered The lower limit of shares that the company is willing to sell in the IPO.
 * @param primaryExchange Market Identifier Code (MIC) of the primary exchange where the security is listed. The Market Identifier Code (MIC) (ISO 10383) is a unique identification code used to identify securities trading exchanges, regulated and non-regulated trading markets.
 * @param securityDescription Description of the security.
 * @param sharesOutstanding The total number of shares that the company has issued and are held by investors.
 * @param totalOfferSize The total amount raised by the company for IPO.
 * @param usCode This is a unique nine-character alphanumeric code that identifies a North American financial security for the purposes of facilitating clearing and settlement of trades.
 */


data class ListIPOs200ResponseResultsInner (

    /* The status of the IPO event. IPO events start out as status \"rumor\" or \"pending\". On listing day, the status changes to \"new\". After the listing day, the status changes to \"history\".  The status \"direct_listing_process\" corresponds to a type of offering where, instead of going through all the IPO processes, the company decides to list its shares directly on an exchange, without using an investment bank or other intermediaries. This is called a direct listing, direct placement, or direct public offering (DPO). */
    @Json(name = "ipo_status")
    val ipoStatus: ListIPOs200ResponseResultsInner.IpoStatus,

    /* Name of issuer. */
    @Json(name = "issuer_name")
    val issuerName: kotlin.String,

    /* The date when the IPO event was last modified. */
    @Json(name = "last_updated")
    val lastUpdated: java.time.LocalDate,

    /* The classification of the stock. For example, \"CS\" stands for Common Stock. */
    @Json(name = "security_type")
    val securityType: kotlin.String,

    /* The ticker symbol of the IPO event. */
    @Json(name = "ticker")
    val ticker: kotlin.String,

    /* The date when the IPO event was announced. */
    @Json(name = "announced_date")
    val announcedDate: java.time.LocalDate? = null,

    /* Underlying currency of the security. */
    @Json(name = "currency_code")
    val currencyCode: kotlin.String? = null,

    /* The price set by the company and its underwriters before the IPO goes live. */
    @Json(name = "final_issue_price")
    val finalIssuePrice: kotlin.Float? = null,

    /* The highest price within the IPO price range that the company might use to price the shares. */
    @Json(name = "highest_offer_price")
    val highestOfferPrice: kotlin.Float? = null,

    /* International Securities Identification Number. This is a unique twelve-digit code that is assigned to every security issuance in the world. */
    @Json(name = "isin")
    val isin: kotlin.String? = null,

    /* First trading date for the newly listed entity. */
    @Json(name = "listing_date")
    val listingDate: java.time.LocalDate? = null,

    /* The minimum number of shares that can be bought or sold in a single transaction. */
    @Json(name = "lot_size")
    val lotSize: java.math.BigDecimal? = null,

    /* The lowest price within the IPO price range that the company is willing to offer its shares to investors. */
    @Json(name = "lowest_offer_price")
    val lowestOfferPrice: kotlin.Float? = null,

    /* The upper limit of the shares that the company is offering to investors. */
    @Json(name = "max_shares_offered")
    val maxSharesOffered: java.math.BigDecimal? = null,

    /* The lower limit of shares that the company is willing to sell in the IPO. */
    @Json(name = "min_shares_offered")
    val minSharesOffered: java.math.BigDecimal? = null,

    /* Market Identifier Code (MIC) of the primary exchange where the security is listed. The Market Identifier Code (MIC) (ISO 10383) is a unique identification code used to identify securities trading exchanges, regulated and non-regulated trading markets. */
    @Json(name = "primary_exchange")
    val primaryExchange: kotlin.String? = null,

    /* Description of the security. */
    @Json(name = "security_description")
    val securityDescription: kotlin.String? = null,

    /* The total number of shares that the company has issued and are held by investors. */
    @Json(name = "shares_outstanding")
    val sharesOutstanding: java.math.BigDecimal? = null,

    /* The total amount raised by the company for IPO. */
    @Json(name = "total_offer_size")
    val totalOfferSize: kotlin.Float? = null,

    /* This is a unique nine-character alphanumeric code that identifies a North American financial security for the purposes of facilitating clearing and settlement of trades. */
    @Json(name = "us_code")
    val usCode: kotlin.String? = null

) {

    /**
     * The status of the IPO event. IPO events start out as status \"rumor\" or \"pending\". On listing day, the status changes to \"new\". After the listing day, the status changes to \"history\".  The status \"direct_listing_process\" corresponds to a type of offering where, instead of going through all the IPO processes, the company decides to list its shares directly on an exchange, without using an investment bank or other intermediaries. This is called a direct listing, direct placement, or direct public offering (DPO).
     *
     * Values: directListingProcess,history,new,pending,postponed,rumor,withdrawn
     */
    @JsonClass(generateAdapter = false)
    enum class IpoStatus(val value: kotlin.String) {
        @Json(name = "direct_listing_process") directListingProcess("direct_listing_process"),
        @Json(name = "history") history("history"),
        @Json(name = "new") new("new"),
        @Json(name = "pending") pending("pending"),
        @Json(name = "postponed") postponed("postponed"),
        @Json(name = "rumor") rumor("rumor"),
        @Json(name = "withdrawn") withdrawn("withdrawn");
    }

}

