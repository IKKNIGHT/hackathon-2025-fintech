/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param participantTimestamp The nanosecond accuracy Participant/Exchange Unix Timestamp. This is the timestamp of when the quote was actually generated at the exchange.
 * @param sequenceNumber The sequence number represents the sequence in which quote events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11). Values reset after each trading session/day.
 * @param sipTimestamp The nanosecond accuracy SIP Unix Timestamp. This is the timestamp of when the SIP received this quote from the exchange which produced it.
 * @param askExchange The ask exchange ID
 * @param askPrice The ask price.
 * @param askSize The ask size. This represents the number of round lot orders at the given ask price. The normal round lot size is 100 shares. An ask size of 2 means there are 200 shares available to purchase at the given ask price.
 * @param bidExchange The bid exchange ID
 * @param bidPrice The bid price.
 * @param bidSize The bid size. This represents the number of round lot orders at the given bid price. The normal round lot size is 100 shares. A bid size of 2 means there are 200 shares for purchase at the given bid price.
 * @param conditions A list of condition codes.
 * @param indicators A list of indicator codes.
 * @param tape There are 3 tapes which define which exchange the ticker is listed on. These are integers in our objects which represent the letter of the alphabet. Eg: 1 = A, 2 = B, 3 = C. * Tape A is NYSE listed securities * Tape B is NYSE ARCA / NYSE American * Tape C is NASDAQ
 * @param trfTimestamp The nanosecond accuracy TRF (Trade Reporting Facility) Unix Timestamp. This is the timestamp of when the trade reporting facility received this quote.
 */


data class GetStocksQuotes200ResponseResultsInner (

    /* The nanosecond accuracy Participant/Exchange Unix Timestamp. This is the timestamp of when the quote was actually generated at the exchange. */
    @Json(name = "participant_timestamp")
    val participantTimestamp: kotlin.Long,

    /* The sequence number represents the sequence in which quote events happened. These are increasing and unique per ticker symbol, but will not always be sequential (e.g., 1, 2, 6, 9, 10, 11). Values reset after each trading session/day. */
    @Json(name = "sequence_number")
    val sequenceNumber: kotlin.Long,

    /* The nanosecond accuracy SIP Unix Timestamp. This is the timestamp of when the SIP received this quote from the exchange which produced it. */
    @Json(name = "sip_timestamp")
    val sipTimestamp: kotlin.Long,

    /* The ask exchange ID */
    @Json(name = "ask_exchange")
    val askExchange: kotlin.Int? = null,

    /* The ask price. */
    @Json(name = "ask_price")
    val askPrice: kotlin.Double? = null,

    /* The ask size. This represents the number of round lot orders at the given ask price. The normal round lot size is 100 shares. An ask size of 2 means there are 200 shares available to purchase at the given ask price. */
    @Json(name = "ask_size")
    val askSize: kotlin.Double? = null,

    /* The bid exchange ID */
    @Json(name = "bid_exchange")
    val bidExchange: kotlin.Int? = null,

    /* The bid price. */
    @Json(name = "bid_price")
    val bidPrice: kotlin.Double? = null,

    /* The bid size. This represents the number of round lot orders at the given bid price. The normal round lot size is 100 shares. A bid size of 2 means there are 200 shares for purchase at the given bid price. */
    @Json(name = "bid_size")
    val bidSize: kotlin.Double? = null,

    /* A list of condition codes. */
    @Json(name = "conditions")
    val conditions: kotlin.collections.List<kotlin.Int>? = null,

    /* A list of indicator codes. */
    @Json(name = "indicators")
    val indicators: kotlin.collections.List<kotlin.Int>? = null,

    /* There are 3 tapes which define which exchange the ticker is listed on. These are integers in our objects which represent the letter of the alphabet. Eg: 1 = A, 2 = B, 3 = C. * Tape A is NYSE listed securities * Tape B is NYSE ARCA / NYSE American * Tape C is NASDAQ */
    @Json(name = "tape")
    val tape: kotlin.Int? = null,

    /* The nanosecond accuracy TRF (Trade Reporting Facility) Unix Timestamp. This is the timestamp of when the trade reporting facility received this quote. */
    @Json(name = "trf_timestamp")
    val trfTimestamp: kotlin.Long? = null

) {


}

