/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param buyRatings The count of 'Buy' ratings from contributing analysts.
 * @param holdRatings The count of 'Hold' ratings from contributing analysts.
 * @param priceTargetContributors The number of unique analysts contributing price targets.
 * @param ratingsContributors The number of unique analysts contributing to the overall ratings consensus.
 * @param sellRatings The count of 'Sell' ratings from contributing analysts.
 * @param strongBuyRatings The count of 'Strong Buy' ratings from contributing analysts.
 * @param strongSellRatings The count of 'Strong Sell' ratings from contributing analysts.
 * @param consensusPriceTarget The average price target across all analysts, rounded to 2 decimal places.
 * @param consensusRating The overall rating category determined by the average consensus weight. Possible values: 'strong_buy', 'buy', 'hold', 'sell', 'strong_sell'.
 * @param consensusRatingValue The numerical average of all consensus weights, rounded to 2 decimal places. Scale ranges from 1 (Strong Sell) to 5 (Strong Buy).
 * @param highPriceTarget The highest price target among all contributing analysts.
 * @param lowPriceTarget The lowest price target among all contributing analysts.
 * @param ticker The requested ticker.
 */


data class GetBenzingaV1ConsensusRatings200ResponseResultsInner (

    /* The count of 'Buy' ratings from contributing analysts. */
    @Json(name = "buy_ratings")
    val buyRatings: kotlin.Long,

    /* The count of 'Hold' ratings from contributing analysts. */
    @Json(name = "hold_ratings")
    val holdRatings: kotlin.Long,

    /* The number of unique analysts contributing price targets. */
    @Json(name = "price_target_contributors")
    val priceTargetContributors: kotlin.Long,

    /* The number of unique analysts contributing to the overall ratings consensus. */
    @Json(name = "ratings_contributors")
    val ratingsContributors: kotlin.Long,

    /* The count of 'Sell' ratings from contributing analysts. */
    @Json(name = "sell_ratings")
    val sellRatings: kotlin.Long,

    /* The count of 'Strong Buy' ratings from contributing analysts. */
    @Json(name = "strong_buy_ratings")
    val strongBuyRatings: kotlin.Long,

    /* The count of 'Strong Sell' ratings from contributing analysts. */
    @Json(name = "strong_sell_ratings")
    val strongSellRatings: kotlin.Long,

    /* The average price target across all analysts, rounded to 2 decimal places. */
    @Json(name = "consensus_price_target")
    val consensusPriceTarget: kotlin.Double? = null,

    /* The overall rating category determined by the average consensus weight. Possible values: 'strong_buy', 'buy', 'hold', 'sell', 'strong_sell'. */
    @Json(name = "consensus_rating")
    val consensusRating: kotlin.String? = null,

    /* The numerical average of all consensus weights, rounded to 2 decimal places. Scale ranges from 1 (Strong Sell) to 5 (Strong Buy). */
    @Json(name = "consensus_rating_value")
    val consensusRatingValue: kotlin.Double? = null,

    /* The highest price target among all contributing analysts. */
    @Json(name = "high_price_target")
    val highPriceTarget: kotlin.Float? = null,

    /* The lowest price target among all contributing analysts. */
    @Json(name = "low_price_target")
    val lowPriceTarget: kotlin.Float? = null,

    /* The requested ticker. */
    @Json(name = "ticker")
    val ticker: kotlin.String? = null

) {


}

