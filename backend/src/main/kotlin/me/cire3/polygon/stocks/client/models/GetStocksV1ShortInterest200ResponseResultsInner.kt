/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param avgDailyVolume The average daily trading volume for the stock over a specified period, typically used to contextualize short interest.
 * @param daysToCover Calculated as short_interest divided by avg_daily_volume, representing the estimated number of days it would take to cover all short positions based on average trading volume.
 * @param settlementDate The date (formatted as YYYY-MM-DD) on which the short interest data is considered settled, typically based on exchange reporting schedules.
 * @param shortInterest The total number of shares that have been sold short but have not yet been covered or closed out.
 * @param ticker The primary ticker symbol for the stock.
 */


data class GetStocksV1ShortInterest200ResponseResultsInner (

    /* The average daily trading volume for the stock over a specified period, typically used to contextualize short interest. */
    @Json(name = "avg_daily_volume")
    val avgDailyVolume: kotlin.Long,

    /* Calculated as short_interest divided by avg_daily_volume, representing the estimated number of days it would take to cover all short positions based on average trading volume. */
    @Json(name = "days_to_cover")
    val daysToCover: kotlin.Double,

    /* The date (formatted as YYYY-MM-DD) on which the short interest data is considered settled, typically based on exchange reporting schedules. */
    @Json(name = "settlement_date")
    val settlementDate: kotlin.String,

    /* The total number of shares that have been sold short but have not yet been covered or closed out. */
    @Json(name = "short_interest")
    val shortInterest: kotlin.Long? = null,

    /* The primary ticker symbol for the stock. */
    @Json(name = "ticker")
    val ticker: kotlin.String? = null

) {


}

